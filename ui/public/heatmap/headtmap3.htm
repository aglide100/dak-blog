<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <!-- d3.mouse is remove at v6 instead use pointer -->
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <style></style>
  </head>
  <body>
    <div id="my_dataviz"></div>

    <script>
      const maxValue = 100;
      var cellSize = 20;

      function generatorRandomInt() {
        return Math.floor(Math.random() * Math.floor(maxValue));
      }

      var margin = { top: 0, right: 0, bottom: 0, left: 0 },
        width = 1000 - margin.left - margin.right,
        height = 1200 - margin.top - margin.bottom;

      var duration = 1000;
      var initTime = new Date(Date.now() - duration);

      var myGroups = [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
      ];
      var myVars = [
        "v1",
        "v2",
        "v3",
        "v4",
        "v5",
        "v6",
        "v7",
        "v8",
        "v9",
        "v10",
        "v11",
        "v12",
        "v13",
        "v14",
        "v15",
        "v16",
        "v17",
        "v18",
        "v19",
        "v20",
        "v21",
        "v22",
        "v23",
        "v24",
        "v25",
        "v26",
        "v27",
        "v28",
        "v29",
        "v30",
        "v31",
        "v32",
        "v33",
        "v34",
        "v35",
        "v36",
        "v37",
        "v38",
        "v39",
        "v40",
        "v41",
        "v42",
        "v43",
        "v44",
        "v45",
        "v46",
        "v47",
        "v48",
        "v49",
        "v50",
        "v51",
        "v52",
        "v53",
        "v54",
        "v55",
        "v56",
      ];

      var data = [];

      for (i = 0; i < myGroups.length; i++) {
        for (k = 0; k < myVars.length; k++) {
          data.push({
            x: myGroups[i],
            y: myVars[k],
            value: generatorRandomInt(),
          });
        }
      }

      // create a tooltip
      var tooltip = d3
        .select("#my_dataviz")
        .append("div")
        .style("opacity", 0)
        .attr("class", "tooltip")
        .style("background-color", "white")
        .style("border", "solid")
        .style("border-width", "2px")
        .style("border-radius", "5px")
        .style("padding", "5px");

      var myColor = d3.scaleLinear().range(["white", "red"]).domain([1, 100]);

      var svg = d3
        .select("#my_dataviz")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g");

      var x = d3
        .scaleBand()
        .range([0, cellSize * myGroups.length])
        .domain(myGroups);
      svg
        .append("g")
        .attr(
          "transform",
          "translate(" + (cellSize + 10) + "," + (height - cellSize) + ")"
        )
        .call(d3.axisBottom(x));

      var timeBar = d3
        .scaleTime()
        .domain([initTime, Date.now() + myGroups.length * duration])
        .range([0, cellSize * myGroups.length]);

      timeBarSVG = d3
        .select("svg")
        .append("g")
        .attr("transform", "translate(" + (cellSize + 10) + "," + 20 + ")");

      var y = d3
        .scaleBand()
        .range([cellSize * myVars.length, 0])
        .domain(myVars);
      svg
        .append("g")
        .attr(
          "transform",
          "translate(" +
            cellSize +
            "," +
            (height - 10 - (myVars.length + 1) * cellSize) +
            ")"
        )
        .call(d3.axisLeft(y));

      svg
        .append("g")
        .attr("fill", "none")
        .attr("stroke", "#000")
        .attr("stroke-width", "0.1px")
        .attr(
          "transform",
          "translate(" + (cellSize + 10) + "," + -(cellSize + 10) + ")"
        )
        .selectAll("rect")
        .data(data)
        .enter()
        .append("rect")
        .attr("width", cellSize)
        .attr("height", cellSize)
        .attr("class", function (d, i) {
          str = d.x + ":" + d.y + " I:" + i + " value:" + d.value;
          return str;
        })
        .attr("fill", function (d) {
          return myColor(d.value);
        })
        .attr("transform", function (d, i) {
          return (
            "translate(" +
            cellSize * myGroups.indexOf(d.x) +
            "," +
            (height - cellSize - cellSize * myVars.indexOf(d.y)) +
            ")"
          );
        })
        .on("mouseover", function (event, d) {
          tooltip.style("opacity", 1);
        })
        .on("mousemove", function (event, d) {
          tooltip
            .html("The exact value of<br>this cell is: " + d.value)
            .style("left", d3.pointer(this)[0] + 0 + "px")
            .style("top", d3.pointer(this)[1] + "px");
        })
        .on("mouseleave", function (event, d) {
          tooltip.style("opacity", 0);
        });

      svg.transition().duration(1000).on("start", tick);

      function tick() {
        now = new Date();
        timeBar.domain([
          now - (myGroups.length - 2) * duration,
          now - duration,
        ]);
        for (i = myGroups.length; i < 0; i--) {
          for (k = myVars.length; k < 0; k--) {
            data[k].value = data[k - myVars.length * i].value;
          }
        }
        console.log(data);

        d3.select(this).attr("fill", function () {
          return myColor(data.value);
        });

        timeBarSVG.transition().call(d3.axisBottom(timeBar));

        d3.active(this).transition().on("start", tick);
      }
    </script>
  </body>
</html>
