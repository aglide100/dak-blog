name: "build go image"

on:
  push:
    branches:
      - master

jobs:
  buildImage:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        appname:
          - apid
          - db

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./cmd/${{ matrix.appname }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/aglide100/dak-blog--${{ matrix.appname }}:latest

    # steps:
    #   - name: Checkout
    #     uses: actions/checkout@v2
    #   - name: Prepare
    #     id: prepare
    #     run: |
    #       DOCKER_IMAGE=ghcr.io/aglide100/dak-blog--apid
    #       DOCKER_PLATFORMS=linux/amd64
    #       VERSION=edge
    #       if [[ $GITHUB_REF == refs/tags/* ]]; then
    #         VERSION=${GITHUB_REF#refs/tags/v}
    #       fi
    #       if [ "${{ github.event_name }}" = "schedule" ]; then
    #         VERSION=nightly
    #       fi
    #       TAGS="--tag ${DOCKER_IMAGE}:${VERSION}"
    #       if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    #         TAGS="$TAGS --tag ${DOCKER_IMAGE}:latest"
    #       fi
    #       echo ::set-output name=docker_image::${DOCKER_IMAGE}
    #       echo ::set-output name=version::${VERSION}
    #       echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
    #         --build-arg VERSION=${VERSION} \
    #         --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
    #         --build-arg VCS_REF=${GITHUB_SHA::8} \
    #         ${TAGS} --file ./ui/Dockerfile ./ui
    #   - name: Set up Docker Buildx
    #     uses: crazy-max/ghaction-docker-buildx@v3
    #   - name: Docker Buildx (build)
    #     run: |
    #       docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}
    #   - name: Login to DockerHub
    #     if: success() && github.event_name != 'pull_request'
    #     uses: docker/login-action@v1
    #     with:
    #       registry: ghcr.io
    #       username: ${{ github.repository_owner }}
    #       password: ${{ secrets.GHCR_TOKEN }}
    #   - name: Docker Buildx (push)
    #     if: success() && github.event_name != 'pull_request'
    #     run: |
    #       docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}
    #   - name: Inspect image
    #     if: always() && github.event_name != 'pull_request'
    #     run: |
    #       docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}
#  deploy_server:
#    runs-on: ubuntu-latest
#    steps:
#      - name: checkout
#        uses: actions/checkout@v1
#      - name: ssh scp ssh pipelines
#        uses: cross-the-world/ssh-scp-ssh-pipelines@latest
#        env:
#          WELCOME: "ssh scp ssh pipelines"
#          LASTSSH: "Doing something after copying"
#        with:
#          host: ${{ secrets.DC_HOST }}
#          user: ${{ secrets.DC_USER }}
#          #pass: ${{ secrets.DC_PASS }}
#          port: ${{ secrets.DC_PORT }}
#          key: ${{ secrets.DC_KEY }}
#          connect_timeout: 10s
#          first_ssh: |
#            pwd
#          scp: |
#            './*' => ${{ secrets.PATH }}
#          last_ssh: |
#            cd ${{ secrets.PATH }}
#            ./deploy.sh
